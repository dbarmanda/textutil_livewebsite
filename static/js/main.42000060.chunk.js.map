{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","style","backgroundColor","color","placeholder","rows","console","log","newText","toUpperCase","displayAlert","toLowerCase","split","length","lenght","Alert","alert","word","lower","charAt","slice","capitalize","alertmsg","App","bgmode","setBgmode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.42000060.chunk.js","sourcesContent":["//the first componet added dynamically to react app\n\n/*\n\n##Create a Function based component to add it to function:\n    type on keyboard,'rfc'\n          ||\n         \\ /\nimport React from 'react'\n\nexport default function Navbar() {\n  return (\n    <div>\n      \n    </div>\n  )\n}\n\n*/\nimport React from \"react\";\n\n// import proptyes\nimport PropTypes from \"prop-types\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"#\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n                Home\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">\n                About\n              </a>\n            </li>\n          </ul>\n\n{/* lets switch the text of input lable wrt mode  */}\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n\n              onClick={props.toggleMode}\n\n              role=\"switch\"\n              id=\"flexSwitchCheckDefault\"\n            />\n            <label\n              className=\"form-check-label\"\n              htmlFor=\"flexSwitchCheckDefault\"\n            >\n              Enable {props.mode === 'light' ? 'dark' : 'light'}-Mode\n            </label>\n          </div>\n\n          {/* <form className=\"d-flex\">\n              <input\n                className=\"form-control me-2\"\n                type=\"search\"\n                placeholder={props.aboutText}\n                aria-label=\"Search\"\n              />\n              <button className=\"btn btn-outline-success\" type=\"submit\">\n                Search\n              </button>\n            </form> */}\n        </div>\n      </div>\n    </nav>\n  );\n}\n\n//Define Proptypes of the props passed in the component\nNavbar.propTypes = {\n  title: PropTypes.string,\n  aboutText: PropTypes.string,\n};\n","// import React from \"react\";\n\nimport React, { useState } from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nexport default function TextForm(props) {\n  \n  \n  const handleUpClick = ()=>{\n    console.log('Uppercase btn clicked!' + text);\n\n    let newText = text.toUpperCase();\n    // console.log(newText);\n    setText(newText);\n\n    props.displayAlert('success', 'Words capitalized!')\n  }\n  \n  const handleOnChange = (event)=>{\n    // console.log('on change listening');\n    \n    //to get changes in value of text var when typed in textare\n    setText(event.target.value);\n    // console.log(text);\n  }\n  \n\n\n  // ********************************************************************\n  //Declaring a state variable\n  const [text, setText] = useState(\"\");\n  //setText: is a function that will play with the 'statevar' {text}\n\n            /*\n                  text = 'hello setting new val'; @@@**@@@ Wrong\n                      we can't set state var directly\n\n                  \n                  setText will be the only way to manipulate/change the state variable's value\n\n\n            */\n\n  //inside useState: is a default val of 'state-var' {text}\n\n// *******************************************************\n\n  const handleLowClick = ()=>{\n    let newText = text.toLowerCase();\n    setText(newText);\n\n    props.displayAlert('success', 'Words lower-cased!')\n\n    \n  }\n\n  const clearText = ()=>{\n    let newText = '';\n    setText(newText);\n\n    props.displayAlert('success', 'Text-area cleared!')\n  }\n  \n  return (\n    <>\n\n    <div className=\"container \">\n      <div className=\"mb-3\">\n        <label htmlFor=\"text\" className={`form-label my-3 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n          {props.heading}:\n        </label>\n        <textarea\n          className=\"form-control\"\n          \n          value={text}\n          //this feild is always provided with a onChange attribute else console shows error\n\n          onChange={handleOnChange}\n          //a event listener for listening change in textarea\n          \n          id=\"text\"\n// *************************************************************\n          style={{backgroundColor: props.mode === 'light' ? 'white':'grey', color: props.mode==='light'?'black':'white'}}\n\n          placeholder=\"Enter New Text here\"\n          rows=\"8 \"\n        ></textarea>\n\n\n        <button className=\"btn btn-primary my-3 mx-1\" onClick={handleUpClick}>\n          Convert To Uppercase\n        </button>\n\n        <button className=\"btn btn-warning my-3 mx-1\" onClick={handleLowClick}>\n          Convert To LowerCase\n        </button>\n\n        <button className=\"btn btn-danger mx-1\" onClick={clearText}>Clear Text</button>\n      </div>\n    </div>\n\n\n    <div className={`container text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n      <h2>Your Text Analysis:</h2>\n      <p>{text.split(\" \").length} words and {text.length} characters!</p>\n\n      <p>Reading time: {0.008 * text.split(\" \").length}min </p>\n\n      <h3>Preview</h3>\n      <p>{text.lenght>0?text:\"Enter something to Preview!\"}</p>\n    </div>\n    </>\n  );\n}\n\nTextForm.propTypes = {\n  heading: PropTypes.string,\n};\n","import React from \"react\";\n\n\nexport default function Alert(props) {\n\n\n    const capitalize = (word)=>{\n        let lower = word.toLowerCase();\n\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n\n  return (\n    props.alert && <div\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\n      role=\"alert\"\n    >\n      <strong>{capitalize(props.alert.type)}!</strong> {props.alert.alertmsg}\n    </div>\n  );\n}\n","// import logo from './logo.svg';\nimport \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from 'react'\nimport Alert from \"./components/Alert\";\n\n\n\n\nfunction App() {\n\n\n  //start var 'bgmode' to control theme of app \n  const [bgmode, setBgmode] = useState(\"light\");\n\n\n  const toggleBgMode = ()=>{\n    if(bgmode === 'light'){\n      setBgmode('dark');\n      document.body.style.backgroundColor = '#0c215c';\n      displayAlert('success', 'Dark mode has been enabled');\n\n      setTimeout(() => {\n        setAlert('');\n      }, 2000);\n    }\n    else{\n      setBgmode('light');\n      document.body.style.backgroundColor = 'white';\n      displayAlert('success', 'Light mode has been enabled');\n\n      setTimeout(() => {\n        setAlert('');\n      }, 2000);\n    }\n  }\n\n  const [alert, setAlert] = useState(null);\n\n  const displayAlert = (type, message)=>{\n    setAlert({\n      type: type,\n      alertmsg: message\n    });\n\n    setTimeout(() => {\n      setAlert('');\n    }, 2000);\n  }\n\n\n  return (\n    <>\n    {/* aboutText=\"Iam ekno. ka ...\" */}\n       <Navbar title=\"TextBlogUtils\"  mode={bgmode} toggleMode={toggleBgMode} displayAlert={displayAlert}/> \n\n       <Alert alert={alert} />\n\n      <div className=\"container\">\n        <TextForm heading=\"Enter text for Modification\" mode={bgmode} displayAlert={displayAlert}/>\n      </div>\n\n      {/* <About/>; */}\n    </>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}