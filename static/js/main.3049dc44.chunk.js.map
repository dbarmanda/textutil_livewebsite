{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Navbar","to","title","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","placeholder","rows","disabled","length","console","log","newText","toUpperCase","displayAlert","toLowerCase","navigator","clipboard","writeText","split","filter","element","Alert","height","alert","word","lower","charAt","slice","capitalize","alertmsg","App","bgmode","setBgmode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3049dc44.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function About(props) {\n\n\n    // const [myStyle, setmyStyle] = useState({\n    //     color: 'black',\n    //     backgroundColor: 'white'\n    // })\n\n    let myStyle = {\n      color: props.mode === 'light'?'black':'white',\n      backgroundColor: props.mode === 'light'?'white':'rgb(20 28 48)',\n      \n    }\n\n    //Similar to creating an event Listener Syntax RAW hai bhai\n\n\n\n  return (\n    <div className=\"container my-4\" >\n\n      <h2 className=\"my-3\" style={{'color':props.mode===\"light\"?\"black\":'white'}}>About Us</h2>\n\n\n      <div className=\"accordion\" id=\"accordionExample\">\n        <div className=\"accordion-item\"  >\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button\n              className=\"accordion-button\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseOne\"\n              aria-expanded=\"true\"\n              aria-controls=\"collapseOne\"\n              style={myStyle}\n            >\n              <strong>Analyze your Text</strong>\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            className=\"accordion-collapse collapse show\"\n            aria-labelledby=\"headingOne\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle} >\n              TextUtils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or casing alphabets. Lorem ipsum dolor sit amet consectetur adipisicing elit. Totam, iure.\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"accordion-item\" >\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseTwo\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseTwo\"\n              style={myStyle}\n            >\n              <strong>Free to use</strong>\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingTwo\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              It is\n              free character counter tool that provides instant character count & word count statistics for a given texft. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\n                Lorem ipsum dolor, sit amet consectetur adipisicing.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\" >\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseThree\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseThree\"\n              style={myStyle}\n            >\n              <strong>Browser Compatible</strong>\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingThree\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              <strong>Compatible for every device.</strong> This word counter software works in any web browser Chrome/ Firefox/ Internet Explorer/ Safari/ Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays etc. Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsum, neque?\n            </div>\n          </div>\n        </div>\n      </div>\n\n      \n    </div>\n  );\n}\n","//the first componet added dynamically to react app\n\n/*\n\n##Create a Function based component to add it to function:\n    type on keyboard,'rfc'\n          ||\n         \\ /\nimport React from 'react'\n\nexport default function Navbar() {\n  return (\n    <div>\n      \n    </div>\n  )\n}\n\n*/\nimport React from \"react\";\n\n// import proptyes\nimport PropTypes from \"prop-types\";\n\nimport { Link } from \"react-router-dom\";\n\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          {props.title}\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\">\n                About\n              </Link>\n            </li>\n          </ul>\n\n{/* lets switch the text of input lable wrt mode  */}\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n\n              onClick={props.toggleMode}\n\n              role=\"switch\"\n              id=\"flexSwitchCheckDefault\"\n            />\n            <label\n              className=\"form-check-label\"\n              htmlFor=\"flexSwitchCheckDefault\"\n            >\n              Enable {props.mode === 'light' ? 'dark' : 'light'}-Mode\n            </label>\n          </div>\n\n          {/* <form className=\"d-flex\">\n              <input\n                className=\"form-control me-2\"\n                type=\"search\"\n                placeholder={props.aboutText}\n                aria-label=\"Search\"\n              />\n              <button className=\"btn btn-outline-success\" type=\"submit\">\n                Search\n              </button>\n            </form> */}\n        </div>\n      </div>\n    </nav>\n  );\n}\n\n//Define Proptypes of the props passed in the component\nNavbar.propTypes = {\n  title: PropTypes.string,\n  aboutText: PropTypes.string,\n};\n","// import React from \"react\";\n\nimport React, { useState } from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nexport default function TextForm(props) {\n  \n  \n  const handleUpClick = ()=>{\n    console.log('Uppercase btn clicked!' + text);\n\n    let newText = text.toUpperCase();\n    // console.log(newText);\n    setText(newText);\n\n    props.displayAlert('success', 'Words capitalized!')\n  }\n  \n  const handleOnChange = (event)=>{\n    // console.log('on change listening');\n    \n    //to get changes in value of text var when typed in textare\n    setText(event.target.value);\n    // console.log(text);\n  }\n  \n\n\n  // ********************************************************************\n  //Declaring a state variable\n  const [text, setText] = useState(\"\");\n  //setText: is a function that will play with the 'statevar' {text}\n\n            /*\n                  text = 'hello setting new val'; @@@**@@@ Wrong\n                      we can't set state var directly\n\n                  \n                  setText will be the only way to manipulate/change the state variable's value\n\n\n            */\n\n  //inside useState: is a default val of 'state-var' {text}\n\n// *******************************************************\n\n  const handleLowClick = ()=>{\n    let newText = text.toLowerCase();\n    setText(newText);\n\n    props.displayAlert('success', 'Words lower-cased!')\n\n    \n  }\n\n  const clearText = ()=>{\n    let newText = '';\n    setText(newText);\n\n    props.displayAlert('success', 'Text-area cleared!')\n  }\n  \n  const copyText = ()=> {\n    navigator.clipboard.writeText(text);\n    // document.getSelection().removeAllRanges();\n    props.displayAlert('success', 'Text copied!')\n\n  }\n\n\n  return (\n    <>\n\n    <div className=\"container \">\n      <div className=\"mb-3\">\n        <label htmlFor=\"text\" className={`form-label my-3 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n          <h1>{props.heading}:</h1>\n        </label>\n        <textarea\n          className=\"form-control\"\n          \n          value={text}\n          //this feild is always provided with a onChange attribute else console shows error\n\n          onChange={handleOnChange}\n          //a event listener for listening change in textarea\n          \n          id=\"text\"\n// *************************************************************\n          style={{backgroundColor: props.mode === 'light' ? 'white':'grey', color: props.mode==='light'?'black':'white'}}\n\n          placeholder=\"Enter New Text here\"\n          rows=\"8 \"\n        ></textarea>\n\n\n        <button disabled={text.length === 0} className=\"btn btn-primary my-3 mx-1\" onClick={handleUpClick}>\n          Convert To Uppercase\n        </button>\n\n        <button disabled={text.length === 0} className=\"btn btn-warning my-3 mx-1\" onClick={handleLowClick}>\n          Convert To LowerCase\n        </button>\n\n        <button disabled={text.length === 0} className=\"btn btn-danger mx-1\" onClick={clearText}>Clear Text</button>\n\n        <button disabled={text.length === 0} className=\"btn btn-success mx-1\" onClick={copyText}>Copy Text</button>\n      </div>\n    </div>\n\n\n    <div className={`container text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n      <h2>Your Text Analysis:</h2>\n      <p>{text.split(/\\s+/).filter((element)=>{\n        return element.length!==0;\n        }).length} words and {text.length} characters!</p>\n\n      <p>Reading time: {0.008 * text.split(\" \").filter((element)=>{return element.length}).length}min </p>\n\n      <h3>Preview</h3>\n      <p>{text.length>0?text:\"Enter something to Preview!\"}</p>\n    </div>\n    </>\n  );\n}\n\nTextForm.propTypes = {\n  heading: PropTypes.string,\n};\n","import React from \"react\";\n\n\nexport default function Alert(props) {\n\n\n    const capitalize = (word)=>{\n        let lower = word.toLowerCase();\n\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n\n  return (\n    <div style={{height: '50px'}}>\n      {props.alert && <div\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\n      role=\"alert\"\n    >\n      <strong>{capitalize(props.alert.type)}!</strong> {props.alert.alertmsg}\n    </div>}\n    </div>\n  );\n}\n","// import logo from './logo.svg';\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from 'react'\nimport Alert from \"./components/Alert\";\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n\n\n  //start var 'bgmode' to control theme of app \n  const [bgmode, setBgmode] = useState(\"light\");\n\n\n  const toggleBgMode = ()=>{\n    if(bgmode === 'light'){\n      setBgmode('dark');\n      document.body.style.backgroundColor = '#0c215c';\n      displayAlert('success', 'Dark mode has been enabled');\n\n      setTimeout(() => {\n        setAlert('');\n      }, 2000);\n    }\n    else{\n      setBgmode('light');\n      document.body.style.backgroundColor = 'white';\n      displayAlert('success', 'Light mode has been enabled');\n\n      setTimeout(() => {\n        setAlert('');\n      }, 2000);\n    }\n  }\n\n  const [alert, setAlert] = useState(null);\n\n  const displayAlert = (type, message)=>{\n    setAlert({\n      type: type,\n      alertmsg: message\n    });\n\n    setTimeout(() => {\n      setAlert('');\n    }, 2000);\n  }\n\n\n  return (\n    <>\n    <Router>\n     \n    {/* aboutText=\"Iam ekno. ka ...\" */}\n       <Navbar title=\"TextBlogUtils\"  mode={bgmode} toggleMode={toggleBgMode} displayAlert={displayAlert}/> \n\n       <Alert alert={alert} />\n\n<div className=\"container\">\n       <Routes>\n         <Route exact path=\"/about\" element={<About mode={bgmode}/>}/>\n           \n      \n         <Route exact path=\"/\" element={<TextForm heading=\"TextUtils: Word Counter, Character Counter, Text Manipulator\" mode={bgmode} displayAlert={displayAlert} />}/>\n         \n         \n         \n        \n\n      </Routes>\n     \n\n      </div>\n      {/* <About mode={bgmode}/>; */}\n      \n      </Router>\n      </>\n    \n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}